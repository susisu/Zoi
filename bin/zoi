#!/usr/bin/env node

/*
 * Zoi
 * copyright (c) 2015 Susisu
 */

var fs = require("fs");
var Twitter = require("twitter");

var packageInfo = require("../package.json");


process.title = "zoi"

var HOME = (process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE || "") + "/";
var DEFAULT_CONFIG = {
    "consumer": {
        "key"   : "azsgLpxXji3HFGsnxc3JLBoA8",
        "secret": "kuh2KYvctGYN3uuTitgLClQ4BkZzSDMBXDg30oJbPMBglJYtW4"
    },
    "access_token": {
        "key"   : null,
        "secret": null
    },
    "request_token": {
        "key"   : null,
        "secret": null
    },
    "user_id": null,
    "screen_name": null
};
var CONFIG_FILE_NAME = ".zoiconfig";
var DEFAULT_TEXT = "Zoi";
var DEFAULT_EXPRESSION = "^Zoi";
var RECONN_INIT_DELAY = 1000;
var RECONN_MAX_DELAY = 2400000;

var config;
if (!fs.existsSync(HOME + CONFIG_FILE_NAME)) {
    fs.writeFileSync(HOME + CONFIG_FILE_NAME, JSON.stringify(DEFAULT_CONFIG));
    config = DEFAULT_CONFIG;
}
else {
    try {
        config = JSON.parse(fs.readFileSync(HOME + CONFIG_FILE_NAME));
    }
    catch (error) {
        process.stdout.write(HOME + CONFIG_FILE_NAME + " is broken!\n");
        fs.writeFileSync(HOME + CONFIG_FILE_NAME, JSON.stringify(DEFAULT_CONFIG));
        config = DEFAULT_CONFIG;
    }
}


var program = require("commander");
var defaultMode = true;

program.version(packageInfo.version, "-v, --version");

program.option("-t, --text <text>", "change tweet text");
program.option("-s, --suffix <suffix>", "add suffix on to duplicate tweet (do NOT specify space characters!)");

program
    .command("init")
    .description("initialize oauth tokens")
    .action(function () {
        defaultMode = false;

        var client = new Twitter({
            "consumer_key"       : config.consumer.key,
            "consumer_secret"    : config.consumer.secret
        });
        client.oauth.getOAuthRequestToken(
            { "oauth_callback": "oob" },
            function (error, requestTokenKey, requestTokenSecret, results) {
                if (error) {
                    if (error.data) {
                        process.stdout.write(error.data + "\n");
                    }
                    else {
                        process.stdout.write(String(error) + "\n");
                    }
                }
                else {
                    config.request_token.key = requestTokenKey;
                    config.request_token.secret = requestTokenSecret;
                    var url = client.options.authorize_url + "?oauth_token=" + requestTokenKey;
                    fs.writeFileSync(HOME + CONFIG_FILE_NAME, JSON.stringify(config));
                    process.stdout.write("Open: " + url + "\n"
                        + "and allow Zoi access to your account: zoi login <pin>\n");
                }
            }
        );
    });

program
    .command("login <pin>")
    .description("log in to an account")
    .action(function (pin) {
        defaultMode = false;

        var client = new Twitter({
            "consumer_key"       : config.consumer.key,
            "consumer_secret"    : config.consumer.secret
        });
        client.oauth.getOAuthAccessToken(
            config.request_token.key,
            config.request_token.secret,
            pin,
            function (error, accessTokenKey, accessTokenSecret, results) {
                if (error) {
                    if (error.data) {
                        process.stdout.write(error.data + "\n");
                    }
                    else {
                        process.stdout.write(String(error) + "\n");
                    }
                    process.stdout.write("Try: zoi init\n");
                }
                else {
                    config.access_token.key = accessTokenKey;
                    config.access_token.secret = accessTokenSecret;
                    config.user_id = results.user_id;
                    config.screen_name = results.screen_name;
                    fs.writeFileSync(HOME + CONFIG_FILE_NAME, JSON.stringify(config));
                    process.stdout.write("You are now logged in as @" + config.screen_name
                        + "!\nLet's try: zoi\n");
                }
            }
        );
    });

program
    .command("watch [expression]")
    .description("watch timeline to tweet automatically")
    .action(function (expression) {
        defaultMode = false;

        if (!expression) {
            expression = DEFAULT_EXPRESSION;
        }
        var re = new RegExp(expression);
        if (!config.access_token.key || !config.access_token.secret) {
            process.stdout.write("You are not logged in!\nTry: zoi init\n");
        }
        else {
            var client = new Twitter({
                "consumer_key"       : config.consumer.key,
                "consumer_secret"    : config.consumer.secret,
                "access_token_key"   : config.access_token.key,
                "access_token_secret": config.access_token.secret
            });
            var connected = false;
            var delay = RECONN_INIT_DELAY;
            connect();
            function connect() {
                client.stream(
                    "user",
                    {},
                    function (stream) {
                        stream.on("data", function (data) {
                            if (!connected) {
                                connected = true;
                                delay = RECONN_INIT_DELAY;
                                process.stdout.write("[" + (new Date()).toLocaleTimeString() + "] Connected\n");
                            }
                            if (!data.retweeted_status && data.text && re.test(data.text)
                                && data.user && data.user.id_str !== config.user_id) {
                                process.stdout.write("[" + (new Date()).toLocaleTimeString() + "] @"
                                    + data.user.screen_name + ": " + data.text + "\n");
                                zoi(client);
                            }
                        });

                        stream.on("end", function (response) {
                            connected = false;
                            process.stdout.write("[" + (new Date()).toLocaleTimeString() + "] Disconnected: "
                                + response.statusCode + "\n");
                            setTimeout(connect, delay);
                            delay *= Math.min(delay * 2, RECONN_MAX_DELAY);
                        });

                        stream.on("error", function (error) {
                            process.stdout.write(String(error) + "\n");
                            stream.destroy();
                        });
                    }
                );
            }
        }
    });

program.parse(process.argv);

if (defaultMode) {
    if (!config.access_token.key || !config.access_token.secret) {
        process.stdout.write("You are not logged in!\nTry: zoi init\n");
    }
    else {
        var client = new Twitter({
            "consumer_key"       : config.consumer.key,
            "consumer_secret"    : config.consumer.secret,
            "access_token_key"   : config.access_token.key,
            "access_token_secret": config.access_token.secret
        });
        zoi(client);
    }
}

function zoi(client, message) {
    if (!message) {
        message = program.text ? program.text : DEFAULT_TEXT;
    }
    client.post(
        "statuses/update",
        { "status": message },
        function (error, params, response) {
            if (error) {
                if (error.data) {
                    try {
                        var errorData = JSON.parse(error.data);
                        if (errorData.errors) {
                            process.stdout.write("[" + (new Date()).toLocaleTimeString() + "] Error:\n");
                            errorData.errors.forEach(function (error) {
                                process.stdout.write("  " + error.code.toString() + ": " + error.message + "\n");
                                if (error.code === 187 && program.suffix && program.suffix.length > 0) {
                                    zoi(client, message + program.suffix);
                                }
                            });
                        }
                        else {
                            process.stdout.write("[" + (new Date()).toLocaleTimeString() + "] Error\n");
                        }
                    }
                    catch (parseError) {
                        process.stdout.write("[" + (new Date()).toLocaleTimeString() + "] Error\n");
                    }
                }
                else {
                    process.stdout.write("[" + (new Date()).toLocaleTimeString() + "] " + String(error) + "\n");
                }
            }
            else {
                process.stdout.write("[" + (new Date()).toLocaleTimeString() + "] Tweeted: " + message + "\n");
            }
        }
    );
}
